/**
 * SendX API
 * SendX is built on the simple tenet that users must have open access to their data. SendX API is the first step in that direction. To cite some examples:   - subscribe / unsubscribe a contact from a list   - Schedule campaign to a segment of users   - Trigger transactional emails   - Get / PUT / POST and DELETE operations on team, campaign, list, contact, report etc. and so on.  As companies grow big, custom use cases around email marketing also crop up. SendX API ensures   that SendX platform is able to satisfy such unforeseen use cases. They may range from building     custom reporting dashboard to tagging contacts with custom attributes or triggering emails based on recommendation algorithm.  We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.  Also all API calls besides:   - Subscribe / unsubscribe signup form  required **api_key** to be passed as **header**   ### The Envelope Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact: ```json {     \"status\": \"200\",      \"message\": \"OK\",     \"data\"\": [        {          ...        },        .        .        .     ] } ```  #### Status  The status key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like: ```json {     \"status\": \"404\" } ```  #### Data  The data key is the meat of the response. It may be a list containing single object or multiple objects  #### Message  This returns back human readable message. This is specially useful to make sense in case of error scenarios. 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2007', 'model/DeepListEmailContact', 'model/InlineResponse2002', 'model/ListAddUpdate', 'model/InlineResponse2008'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2007'), require('../model/DeepListEmailContact'), require('../model/InlineResponse2002'), require('../model/ListAddUpdate'), require('../model/InlineResponse2008'));
  } else {
    // Browser globals (root is window)
    if (!root.SendXApi) {
      root.SendXApi = {};
    }
    root.SendXApi.ListApi = factory(root.SendXApi.ApiClient, root.SendXApi.InlineResponse2007, root.SendXApi.DeepListEmailContact, root.SendXApi.InlineResponse2002, root.SendXApi.ListAddUpdate, root.SendXApi.InlineResponse2008);
  }
}(this, function(ApiClient, InlineResponse2007, DeepListEmailContact, InlineResponse2002, ListAddUpdate, InlineResponse2008) {
  'use strict';

  /**
   * List service.
   * @module api/ListApi
   * @version v1
   */

  /**
   * Constructs a new ListApi. 
   * @alias module:api/ListApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the listGet operation.
     * @callback module:api/ListApi~listGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about all lists
     * 
     * @param {String} apiKey 
     * @param {module:api/ListApi~listGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.listGet = function(apiKey, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listListIdContactsGet operation.
     * @callback module:api/ListApi~listListIdContactsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeepListEmailContact>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find contacts belonging to a list
     * 
     * @param {String} apiKey 
     * @param {Integer} listId ID of list that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.limit Maximum number of contacts to be returned. Note that limit maximum value is 100 and default value is 10.
     * @param {Integer} opts.offset Offset from where we contacts should be retrieved. Default value is 0.
     * @param {String} opts.contactType Can be any of the following - all, confirmed, unconfirmed, unsubscribed, bounced, markedspam. Default contact_type is all
     * @param {String} opts.search search term which shall be run against contact&#39;s first name, last name and email.
     * @param {module:api/ListApi~listListIdContactsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeepListEmailContact>}
     */
    this.listListIdContactsGet = function(apiKey, listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listListIdContactsGet";
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling listListIdContactsGet";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'contact_type': opts['contactType'],
        'search': opts['search']
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DeepListEmailContact];

      return this.apiClient.callApi(
        '/list/{listId}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listListIdDelete operation.
     * @callback module:api/ListApi~listListIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a list
     * 
     * @param {String} apiKey 
     * @param {Integer} listId List ID to delete
     * @param {module:api/ListApi~listListIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.listListIdDelete = function(apiKey, listId, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listListIdDelete";
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling listListIdDelete";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/list/{listId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listListIdGet operation.
     * @callback module:api/ListApi~listListIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find list by ID
     * 
     * @param {String} apiKey 
     * @param {Integer} listId ID of list that needs to be fetched
     * @param {module:api/ListApi~listListIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    this.listListIdGet = function(apiKey, listId, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listListIdGet";
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling listListIdGet";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Array;

      return this.apiClient.callApi(
        '/list/{listId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listListIdPut operation.
     * @callback module:api/ListApi~listListIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a list by ID
     * 
     * @param {String} apiKey 
     * @param {Integer} listId ID of list that needs to be updated
     * @param {module:model/ListAddUpdate} body List object that needs to be added
     * @param {module:api/ListApi~listListIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.listListIdPut = function(apiKey, listId, body, callback) {
      var postBody = body;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listListIdPut";
      }

      // verify the required parameter 'listId' is set
      if (listId == undefined || listId == null) {
        throw "Missing the required parameter 'listId' when calling listListIdPut";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling listListIdPut";
      }


      var pathParams = {
        'listId': listId
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/list/{listId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPost operation.
     * @callback module:api/ListApi~listPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new list
     * 
     * @param {String} apiKey 
     * @param {module:model/ListAddUpdate} body List object that needs to be added
     * @param {module:api/ListApi~listPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.listPost = function(apiKey, body, callback) {
      var postBody = body;

      // verify the required parameter 'apiKey' is set
      if (apiKey == undefined || apiKey == null) {
        throw "Missing the required parameter 'apiKey' when calling listPost";
      }

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling listPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'api_key': apiKey
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
